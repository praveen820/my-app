{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","aboutText","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","praveen","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","newText","split","join","length","defaultprpos","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","Mode","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.ba80aad2.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                        </li>\r\n                        <li className=\"nav-item\"> \r\n                            <a className=\"nav-link\" href=\"#\">{props.aboutText}</a>\r\n                        </li>\r\n                    </ul>\r\n                    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n                        <label className =\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable darkmode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string,\r\n    aboutText: PropTypes.string\r\n}\r\n\r\nNavbar.defaultprpos = {\r\n    title: 'set title hear',\r\n    aboutText: ' About text hear'\r\n};","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () => {\r\n        //console.log(\"Uppercase was clicked\");\r\n        setText(praveen => praveen.toUpperCase())\r\n        props.showAlert(\"Converted to uppercase!\", \"success\");\r\n    }\r\n\r\n    const handleLoClick = () => {\r\n        //console.log(\"Uppercase was clicked\");\r\n        setText(praveen => praveen.toLowerCase())\r\n        props.showAlert(\"Converted to lowercase!\", \"success\");\r\n    }\r\n\r\n    const handleClearClick = () => {\r\n        //console.log(\"Uppercase was clicked\");\r\n        let newText = ''\r\n        setText(newText)\r\n        props.showAlert(\"Clear text!\", \"success\");\r\n    }\r\n\r\n    const handleOnchange = (event) => {\r\n        //console.log(\"On change\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const handleCopy = () => {\r\n        let text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value)\r\n        props.showAlert(\" Copid Text!\", \"success\");\r\n\r\n    }\r\n\r\n    const handleExtraSpaces = () =>{\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\" Remove ExtraSpaces!\", \"success\");\r\n    }\r\n\r\n    const [text, setText] = useState('');\r\n    return (\r\n        <>\r\n            <div className=\"conatainer\" style={{color: props.mode==='dark'?'white':'#071f43'}}>\r\n                <h1>{props.heading}  </h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" value={text} onChange={handleOnchange} style={{backgroundColor: props.mode==='dark'?'lightblue':'white' , color: props.mode==='dark'?'white':'#071f43'}} id=\"myBox\" rows=\"8\"></textarea>\r\n                </div>\r\n                <button type=\"button\" className=\"btn btn-primary mx-2\" onClick={handleUpClick} >Convert to uppercase </button>\r\n                <button type=\"button\" className=\"btn btn-primary mx-2\" onClick={handleLoClick} >Convert to Lowercase </button>\r\n                <button type=\"button\" className=\"btn btn-primary mx-2\" onClick={handleClearClick} >clear Text </button>\r\n                <button type=\"button\" className=\"btn btn-primary mx-2\" onClick={handleCopy}>Copy Text</button>\r\n                <button type=\"button\" className=\"btn btn-primary mx-2\" onClick={handleExtraSpaces}>handleExtraSpaces</button>\r\n            </div>\r\n            <div className=\"container\" style={{color: props.mode==='dark'?'white':'#071f43'}}>\r\n                <h2>your text summery</h2>\r\n                <p>{text.split(\" \").length} words and {text.length[\" \"]} characters </p>\r\n                <p>{0.008 * text.split(\" \").length} Munits read</p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length>0?text:\"Enter somthing in the textbox above to preview it here\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n //<span id =\"charcountWords\">words</span> ==$0\r\n //<p>{text.split(\" \").length} words and {text.length [\" \"]} characters </p>","import React from 'react'\r\n\r\n    function Alert(props) {\r\n        const capitalize = (word) => {\r\n            const lower = word.toLowerCase();\r\n            return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n        }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n            \r\n        </div>\r\n    )\r\n    }\r\n\r\nexport default Alert","import './App.css';\n//import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n\nfunction App() {\n  const [Mode, setMode] = useState('light');\n const [alert, setAlert] = useState(null)\n\n const showAlert = (message , type) =>{\n   setAlert({\n     msg: message,\n     type: type\n   })\n   setTimeout(() => {\n     setAlert(null);\n   }, 1500);\n }\n  const toggleMode = () => {\n    if (Mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#071f43';\n      showAlert(\"Dark mode has been enabled\" , \"success\");\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"light mode has been enabled\" , \"success\");\n    }\n  }\n  return (\n    <>\n    \n      <Navbar title=\"Textchanger\" mode={Mode} toggleMode={toggleMode} />\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n       <TextForm showAlert={showAlert} heading=\"Enter the text area below\" mode={Mode} />\n      </div>\n       \n    </>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}